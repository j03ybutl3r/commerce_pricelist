<?php

/**
 * @file
 * Contains commerce_pricelist.module..
 */

use Drupal\commerce\PurchasableEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function commerce_pricelist_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.commerce_pricelist':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows defining prices for specific stores, customers, quantities using price lists.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_bundle_info().
 */
function commerce_pricelist_entity_bundle_info() {
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  $purchasable_entity_types = array_filter($entity_types, function (EntityTypeInterface $entity_type) {
    return $entity_type->entityClassImplements(PurchasableEntityInterface::class);
  });

  $bundles = [];
  foreach ($purchasable_entity_types as $entity_type) {
    $bundles['commerce_pricelist'][$entity_type->id()] = [
      'label' => $entity_type->getLabel(),
      'description' => t('Create a price list for @label', ['@label' => $entity_type->getLowercaseLabel()]),
      'translatable' => FALSE,
      'provider' => 'commerce_pricelist',
    ];
    $bundles['commerce_pricelist_item'][$entity_type->id()] = [
      'label' => $entity_type->getLabel(),
      'translatable' => FALSE,
      'provider' => 'commerce_pricelist',
    ];
  }

  return $bundles;
}

/**
 * Implements hook_entity_delete().
 */
function commerce_pricelist_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityType()->entityClassImplements(PurchasableEntityInterface::class)) {
    // A purchasable entity was deleted. Delete all of its price list items.
    $price_list_item_storage = \Drupal::entityTypeManager()->getStorage('commerce_pricelist_item');
    $query = $price_list_item_storage->getQuery();
    $query->condition('type', $entity->getEntityTypeId());
    $query->condition('purchasable_entity', $entity->id());
    $result = $query->execute();
    if (!empty($result)) {
      // @todo This can crash due to there potentially being thousands of items.
      $price_list_items = $price_list_item_storage->loadMultiple($result);
      $price_list_item_storage->delete($price_list_items);
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_pricelist_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  if ($field_name == 'customer_role' && $entity_type == 'commerce_pricelist') {
    $element['#options']['_none'] = t('- Any role -');
  }
}

/**
 * Implements hook_theme().
 */
function commerce_pricelist_theme() {
  return [
    'commerce_pricelist' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function commerce_pricelist_theme_suggestions_commerce_pricelist(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_pricelist', $variables);
}

/**
 * Prepares variables for price list templates.
 *
 * Default template: commerce-price-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_pricelist(array &$variables) {
  /** @var Drupal\commerce_pricelist\Entity\PriceListInterface $price_list */
  $price_list = $variables['elements']['#commerce_pricelist'];

  $variables['price_list_entity'] = $price_list;
  $variables['price_list'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['price_list'][$key] = $variables['elements'][$key];
  }
}
