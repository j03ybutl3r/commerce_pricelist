<?php

/**
 * @file
 * Contains commerce_pricelist.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function commerce_pricelist_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_pricelist module.
    case 'help.page.commerce_pricelist':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Set product prices through price lists') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function commerce_pricelist_theme() {
  $theme = [];
  $theme['price_list'] = [
    'render element' => 'elements',
    'file' => 'price_list.page.inc',
    'template' => 'price_list',
  ];
  $theme['price_list_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'price_list.page.inc',
  ];
  $theme['price_list_item'] = [
    'render element' => 'elements',
    'file' => 'price_list_item.page.inc',
    'template' => 'price_list_item',
  ];
  return $theme;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * - Changes the label of the purchased_entity field to the label of the
 *   target type (e.g. 'Product variation').
 * - Forbids editing the purchased_entity once the order item is no longer new.
 */
function commerce_pricelist_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  if ($field_name == 'purchased_entity' && $entity_type == 'price_list_item') {
    if (!empty($element['target_id']['#target_type'])) {
      $target_type = \Drupal::service('entity_type.manager')->getDefinition($element['target_id']['#target_type']);
      $element['target_id']['#title'] = $target_type->getLabel();
      if (!$context['items']->getEntity()->isNew()) {
        $element['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_pricelist_entity_update(EntityInterface $entity) {
  if ($entity instanceof \Drupal\commerce\PurchasableEntityInterface) {
    /** @var \Drupal\commerce\PurchasableEntityInterface $entity */
    foreach ($entity->get('field_price_list_item') as $item) {
      $entityAdaper = $item->get('entity')->getTarget();
      if ($entityAdaper){
        /** @var \Drupal\commerce_pricelist\Entity\PriceListItem $itemEntity */
        $itemEntity = $entityAdaper->getValue();
        $itemEntity->setPurchasedEntityId($entity->id());
        if (!$itemEntity->getName() && $entity->getTitle()) {
          $itemEntity->setName($entity->getTitle());
        }
        if (!$itemEntity->getPrice() && $entity->getPrice()) {
          $itemEntity->setPrice($entity->getPrice());
        }
        $itemEntity->save();
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function commerce_pricelist_theme_suggestions_price_list(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#price_list'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'price_list__' . $sanitized_view_mode;
  $suggestions[] = 'price_list__' . $entity->bundle();
  $suggestions[] = 'price_list__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'price_list__' . $entity->id();
  $suggestions[] = 'price_list__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}
